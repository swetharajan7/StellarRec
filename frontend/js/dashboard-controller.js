/**\n * StellarRec Dashboard Controller\n * Manages all dashboard functionality and API integration\n */\n\nclass DashboardController {\n    constructor() {\n        this.api = window.stellarAPI;\n        this.currentSection = 'overview';\n        this.userData = null;\n        this.websockets = new Map();\n        this.charts = new Map();\n        \n        this.init();\n    }\n\n    async init() {\n        try {\n            // Check authentication\n            if (!this.api.isAuthenticated()) {\n                window.location.href = '/login.html';\n                return;\n            }\n\n            // Load user data\n            await this.loadUserData();\n            \n            // Initialize UI\n            this.initializeUI();\n            \n            // Load dashboard data\n            await this.loadDashboardData();\n            \n            // Set up real-time connections\n            this.setupWebSockets();\n            \n            // Set up event listeners\n            this.setupEventListeners();\n            \n        } catch (error) {\n            console.error('Dashboard initialization failed:', error);\n            this.showError('Failed to initialize dashboard');\n        }\n    }\n\n    async loadUserData() {\n        try {\n            this.userData = await this.api.getUserProfile();\n            this.updateUserInfo();\n        } catch (error) {\n            console.error('Failed to load user data:', error);\n        }\n    }\n\n    updateUserInfo() {\n        if (!this.userData) return;\n        \n        // Update sidebar user info\n        const userAvatar = document.querySelector('.user-avatar');\n        const userName = document.querySelector('.user-name');\n        const userEmail = document.querySelector('.user-email');\n        \n        if (userAvatar) {\n            userAvatar.textContent = this.userData.firstName?.charAt(0) || 'U';\n        }\n        \n        if (userName) {\n            userName.textContent = `${this.userData.firstName} ${this.userData.lastName}`;\n        }\n        \n        if (userEmail) {\n            userEmail.textContent = this.userData.email;\n        }\n        \n        // Update user type toggle\n        const userTypeToggle = document.querySelector('.user-type-toggle');\n        if (userTypeToggle) {\n            const buttons = userTypeToggle.querySelectorAll('.toggle-btn');\n            buttons.forEach(btn => {\n                btn.classList.toggle('active', btn.dataset.type === this.api.getUserType());\n            });\n        }\n    }\n\n    initializeUI() {\n        // Initialize navigation\n        this.setupNavigation();\n        \n        // Initialize user type toggle\n        this.setupUserTypeToggle();\n        \n        // Initialize search functionality\n        this.setupSearch();\n        \n        // Initialize notifications\n        this.setupNotifications();\n    }\n\n    setupNavigation() {\n        const navItems = document.querySelectorAll('.nav-item');\n        navItems.forEach(item => {\n            item.addEventListener('click', (e) => {\n                e.preventDefault();\n                const section = item.dataset.section;\n                if (section) {\n                    this.switchSection(section);\n                }\n            });\n        });\n    }\n\n    setupUserTypeToggle() {\n        const toggleButtons = document.querySelectorAll('.toggle-btn');\n        toggleButtons.forEach(btn => {\n            btn.addEventListener('click', () => {\n                const newType = btn.dataset.type;\n                if (newType !== this.api.getUserType()) {\n                    this.switchUserType(newType);\n                }\n            });\n        });\n    }\n\n    setupSearch() {\n        const searchInput = document.querySelector('.search-input');\n        if (searchInput) {\n            let searchTimeout;\n            searchInput.addEventListener('input', (e) => {\n                clearTimeout(searchTimeout);\n                searchTimeout = setTimeout(() => {\n                    this.performSearch(e.target.value);\n                }, 300);\n            });\n        }\n    }\n\n    setupNotifications() {\n        const notificationBell = document.querySelector('.notification-bell');\n        if (notificationBell) {\n            notificationBell.addEventListener('click', () => {\n                this.toggleNotifications();\n            });\n        }\n        \n        // Load notifications\n        this.loadNotifications();\n    }\n\n    async loadDashboardData() {\n        try {\n            // Load data based on current section\n            switch (this.currentSection) {\n                case 'overview':\n                    await this.loadOverviewData();\n                    break;\n                case 'applications':\n                    await this.loadApplicationsData();\n                    break;\n                case 'letters':\n                    await this.loadLettersData();\n                    break;\n                case 'matching':\n                    await this.loadMatchingData();\n                    break;\n                case 'analytics':\n                    await this.loadAnalyticsData();\n                    break;\n                case 'files':\n                    await this.loadFilesData();\n                    break;\n                default:\n                    await this.loadOverviewData();\n            }\n        } catch (error) {\n            console.error('Failed to load dashboard data:', error);\n            this.showError('Failed to load dashboard data');\n        }\n    }\n\n    async loadOverviewData() {\n        try {\n            // Load overview statistics\n            const [applications, letters, analytics, reminders] = await Promise.all([\n                this.api.getApplications(),\n                this.api.getLetters(),\n                this.api.getAnalytics('7d'),\n                this.api.getReminders()\n            ]);\n            \n            this.updateOverviewStats({\n                applications: applications.length,\n                letters: letters.length,\n                completionRate: analytics.completionRate || 0,\n                upcomingDeadlines: reminders.filter(r => r.type === 'deadline').length\n            });\n            \n            // Load recent activity\n            this.updateRecentActivity(analytics.recentActivity || []);\n            \n            // Load AI suggestions\n            await this.loadAISuggestions();\n            \n        } catch (error) {\n            console.error('Failed to load overview data:', error);\n        }\n    }\n\n    async loadApplicationsData() {\n        try {\n            const applications = await this.api.getApplications();\n            this.renderApplications(applications);\n            \n            // Load deadlines\n            const deadlines = await this.api.getDeadlines();\n            this.renderDeadlines(deadlines);\n            \n        } catch (error) {\n            console.error('Failed to load applications data:', error);\n        }\n    }\n\n    async loadLettersData() {\n        try {\n            const letters = await this.api.getLetters();\n            this.renderLetters(letters);\n        } catch (error) {\n            console.error('Failed to load letters data:', error);\n        }\n    }\n\n    async loadMatchingData() {\n        try {\n            // Load user preferences for matching\n            const preferences = this.userData.preferences || {};\n            const matches = await this.api.getUniversityMatches(preferences);\n            this.renderUniversityMatches(matches);\n        } catch (error) {\n            console.error('Failed to load matching data:', error);\n        }\n    }\n\n    async loadAnalyticsData() {\n        try {\n            const [analytics, insights, successFactors] = await Promise.all([\n                this.api.getAnalytics('30d'),\n                this.api.getPredictiveInsights(),\n                this.api.getSuccessFactors()\n            ]);\n            \n            this.renderAnalytics(analytics);\n            this.renderInsights(insights);\n            this.renderSuccessFactors(successFactors);\n            \n        } catch (error) {\n            console.error('Failed to load analytics data:', error);\n        }\n    }\n\n    async loadFilesData() {\n        try {\n            const files = await this.api.getFiles();\n            this.renderFiles(files);\n        } catch (error) {\n            console.error('Failed to load files data:', error);\n        }\n    }\n\n    async loadAISuggestions() {\n        try {\n            const recommendations = await this.api.getRecommendations('suggestions');\n            this.renderAISuggestions(recommendations);\n        } catch (error) {\n            console.error('Failed to load AI suggestions:', error);\n        }\n    }\n\n    async loadNotifications() {\n        try {\n            const notifications = await this.api.getNotifications();\n            this.updateNotificationBadge(notifications.filter(n => !n.read).length);\n            this.renderNotifications(notifications);\n        } catch (error) {\n            console.error('Failed to load notifications:', error);\n        }\n    }\n\n    setupWebSockets() {\n        // Real-time notifications\n        const notificationWS = this.api.connectWebSocket('/notifications/stream', (data) => {\n            this.handleRealtimeNotification(data);\n        });\n        this.websockets.set('notifications', notificationWS);\n        \n        // Real-time collaboration updates\n        const collaborationWS = this.api.connectWebSocket('/collaboration/stream', (data) => {\n            this.handleCollaborationUpdate(data);\n        });\n        this.websockets.set('collaboration', collaborationWS);\n        \n        // Real-time analytics updates\n        const analyticsWS = this.api.connectWebSocket('/analytics/stream', (data) => {\n            this.handleAnalyticsUpdate(data);\n        });\n        this.websockets.set('analytics', analyticsWS);\n    }\n\n    setupEventListeners() {\n        // File upload handling\n        const fileInputs = document.querySelectorAll('input[type=\"file\"]');\n        fileInputs.forEach(input => {\n            input.addEventListener('change', (e) => {\n                this.handleFileUpload(e.target.files);\n            });\n        });\n        \n        // Form submissions\n        const forms = document.querySelectorAll('form');\n        forms.forEach(form => {\n            form.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.handleFormSubmission(form);\n            });\n        });\n        \n        // Button clicks\n        document.addEventListener('click', (e) => {\n            if (e.target.matches('.btn-primary, .btn-outline')) {\n                this.handleButtonClick(e.target);\n            }\n        });\n    }\n\n    switchSection(section) {\n        // Update navigation\n        document.querySelectorAll('.nav-item').forEach(item => {\n            item.classList.toggle('active', item.dataset.section === section);\n        });\n        \n        // Update content sections\n        document.querySelectorAll('.dashboard-section').forEach(sec => {\n            sec.classList.toggle('active', sec.id === `${section}-section`);\n        });\n        \n        // Update page title\n        const pageTitle = document.querySelector('.page-title');\n        if (pageTitle) {\n            pageTitle.textContent = this.getSectionTitle(section);\n        }\n        \n        this.currentSection = section;\n        this.loadDashboardData();\n    }\n\n    switchUserType(newType) {\n        // Update API user type\n        localStorage.setItem('stellarrec_user_type', newType);\n        this.api.userType = newType;\n        \n        // Update UI\n        document.querySelectorAll('.toggle-btn').forEach(btn => {\n            btn.classList.toggle('active', btn.dataset.type === newType);\n        });\n        \n        // Reload dashboard for new user type\n        this.loadDashboardData();\n    }\n\n    async performSearch(query) {\n        if (!query.trim()) return;\n        \n        try {\n            const results = await this.api.search(query);\n            this.renderSearchResults(results);\n        } catch (error) {\n            console.error('Search failed:', error);\n        }\n    }\n\n    async handleFileUpload(files) {\n        for (const file of files) {\n            try {\n                this.showUploadProgress(file.name);\n                const result = await this.api.uploadFile(file);\n                this.showUploadSuccess(file.name, result);\n                \n                // Process document if it's a supported type\n                if (this.isProcessableDocument(file)) {\n                    await this.api.processDocument(result.id);\n                }\n                \n            } catch (error) {\n                console.error('File upload failed:', error);\n                this.showUploadError(file.name, error.message);\n            }\n        }\n    }\n\n    async handleFormSubmission(form) {\n        const formData = new FormData(form);\n        const data = Object.fromEntries(formData.entries());\n        \n        try {\n            const action = form.dataset.action;\n            let result;\n            \n            switch (action) {\n                case 'create-application':\n                    result = await this.api.createApplication(data);\n                    break;\n                case 'create-letter':\n                    result = await this.api.createLetter(data);\n                    break;\n                case 'update-profile':\n                    result = await this.api.updateProfile(data);\n                    break;\n                default:\n                    console.warn('Unknown form action:', action);\n                    return;\n            }\n            \n            this.showSuccess('Form submitted successfully');\n            this.loadDashboardData(); // Refresh data\n            \n        } catch (error) {\n            console.error('Form submission failed:', error);\n            this.showError(error.message);\n        }\n    }\n\n    handleButtonClick(button) {\n        const action = button.dataset.action;\n        const id = button.dataset.id;\n        \n        switch (action) {\n            case 'view-application':\n                this.viewApplication(id);\n                break;\n            case 'edit-letter':\n                this.editLetter(id);\n                break;\n            case 'download-file':\n                this.downloadFile(id);\n                break;\n            case 'run-matching':\n                this.runUniversityMatching();\n                break;\n            default:\n                console.warn('Unknown button action:', action);\n        }\n    }\n\n    // Real-time event handlers\n    handleRealtimeNotification(data) {\n        this.showNotification(data.message, data.type);\n        this.loadNotifications(); // Refresh notifications\n    }\n\n    handleCollaborationUpdate(data) {\n        if (this.currentSection === 'letters') {\n            this.updateCollaborationStatus(data);\n        }\n    }\n\n    handleAnalyticsUpdate(data) {\n        if (this.currentSection === 'analytics') {\n            this.updateAnalyticsCharts(data);\n        }\n    }\n\n    // UI Update Methods\n    updateOverviewStats(stats) {\n        const statCards = document.querySelectorAll('.stat-card');\n        statCards.forEach(card => {\n            const type = card.dataset.type;\n            const numberEl = card.querySelector('.stat-number');\n            if (numberEl && stats[type] !== undefined) {\n                numberEl.textContent = stats[type];\n            }\n        });\n    }\n\n    updateRecentActivity(activities) {\n        const activityList = document.querySelector('.recent-activity-list');\n        if (!activityList) return;\n        \n        activityList.innerHTML = activities.map(activity => `\n            <div class=\"activity-item\">\n                <div class=\"activity-icon\">\n                    <i class=\"material-icons\">${this.getActivityIcon(activity.type)}</i>\n                </div>\n                <div class=\"activity-content\">\n                    <p>${activity.description}</p>\n                    <span class=\"activity-time\">${this.formatTime(activity.timestamp)}</span>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    renderAISuggestions(suggestions) {\n        const suggestionsContainer = document.querySelector('.ai-suggestions');\n        if (!suggestionsContainer) return;\n        \n        suggestionsContainer.innerHTML = suggestions.map(suggestion => `\n            <div class=\"suggestion-card\">\n                <div class=\"suggestion-icon\">${suggestion.icon}</div>\n                <div class=\"suggestion-content\">\n                    <h4>${suggestion.title}</h4>\n                    <p>${suggestion.description}</p>\n                    <button class=\"btn-apply\" data-action=\"apply-suggestion\" data-id=\"${suggestion.id}\">\n                        Apply Suggestion\n                    </button>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    renderApplications(applications) {\n        const applicationsGrid = document.querySelector('.applications-grid');\n        if (!applicationsGrid) return;\n        \n        applicationsGrid.innerHTML = applications.map(app => `\n            <div class=\"dashboard-card application-card\">\n                <div class=\"card-header\">\n                    <div class=\"card-icon\" style=\"background: #1976d2;\">\n                        <i class=\"material-icons\">school</i>\n                    </div>\n                    <div>\n                        <h3 class=\"card-title\">${app.universityName}</h3>\n                        <p class=\"card-subtitle\">${app.program}</p>\n                    </div>\n                    <span class=\"status-badge ${app.status}\">${app.status}</span>\n                </div>\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" style=\"width: ${app.progress}%; background: #1976d2;\"></div>\n                </div>\n                <p>Progress: ${app.progress}%</p>\n                <div class=\"card-actions\">\n                    <button class=\"btn btn-primary\" data-action=\"view-application\" data-id=\"${app.id}\">\n                        View Details\n                    </button>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    renderLetters(letters) {\n        const lettersGrid = document.querySelector('.letters-grid');\n        if (!lettersGrid) return;\n        \n        lettersGrid.innerHTML = letters.map(letter => `\n            <div class=\"letter-card\">\n                <div class=\"letter-header\">\n                    <div class=\"letter-info\">\n                        <h3>${letter.title}</h3>\n                        <p class=\"letter-student\">${letter.studentName}</p>\n                        <p class=\"letter-meta\">Due: ${this.formatDate(letter.deadline)}</p>\n                    </div>\n                    <span class=\"status-badge ${letter.status}\">${letter.status}</span>\n                </div>\n                <div class=\"letter-stats\">\n                    <div class=\"stat-item\">\n                        <span class=\"stat-value\">${letter.wordCount}</span>\n                        <span class=\"stat-label\">Words</span>\n                    </div>\n                    <div class=\"stat-item\">\n                        <span class=\"stat-value\">${letter.completionPercentage}%</span>\n                        <span class=\"stat-label\">Complete</span>\n                    </div>\n                </div>\n                <div class=\"letter-actions\">\n                    <button class=\"btn btn-primary\" data-action=\"edit-letter\" data-id=\"${letter.id}\">\n                        <i class=\"material-icons\">edit</i> Edit\n                    </button>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    renderUniversityMatches(matches) {\n        const matchesContainer = document.querySelector('.match-results');\n        if (!matchesContainer) return;\n        \n        matchesContainer.innerHTML = `\n            <h3>University Matches (${matches.length})</h3>\n            <div class=\"match-grid\">\n                ${matches.map(match => `\n                    <div class=\"match-card ${this.getMatchClass(match.score)}\">\n                        <div class=\"match-score\">${match.score}%</div>\n                        <div class=\"university-info\">\n                            <h4>${match.university.name}</h4>\n                            <p>${match.university.location}</p>\n                            <div class=\"match-reasons\">\n                                ${match.reasons.map(reason => `\n                                    <span class=\"reason-tag\">${reason}</span>\n                                `).join('')}\n                            </div>\n                        </div>\n                    </div>\n                `).join('')}\n            </div>\n        `;\n    }\n\n    renderAnalytics(analytics) {\n        // Render charts and analytics data\n        this.renderChart('applications-chart', analytics.applicationsOverTime);\n        this.renderChart('success-rate-chart', analytics.successRates);\n        this.renderChart('timeline-chart', analytics.timelineData);\n    }\n\n    renderChart(containerId, data) {\n        const container = document.getElementById(containerId);\n        if (!container) return;\n        \n        // Simple chart rendering (in production, use Chart.js or similar)\n        container.innerHTML = `\n            <div class=\"chart-placeholder\">\n                Chart: ${data.title || 'Analytics Data'}\n                <br><small>Data points: ${data.points?.length || 0}</small>\n            </div>\n        `;\n    }\n\n    // Utility methods\n    getSectionTitle(section) {\n        const titles = {\n            overview: 'Dashboard Overview',\n            applications: 'My Applications',\n            letters: 'Recommendation Letters',\n            matching: 'University Matching',\n            analytics: 'Analytics & Insights',\n            files: 'File Management'\n        };\n        return titles[section] || 'Dashboard';\n    }\n\n    getActivityIcon(type) {\n        const icons = {\n            application: 'school',\n            letter: 'mail',\n            deadline: 'schedule',\n            match: 'star',\n            upload: 'cloud_upload'\n        };\n        return icons[type] || 'info';\n    }\n\n    getMatchClass(score) {\n        if (score >= 80) return 'high-match';\n        if (score >= 60) return 'medium-match';\n        return 'low-match';\n    }\n\n    formatDate(dateString) {\n        return new Date(dateString).toLocaleDateString();\n    }\n\n    formatTime(timestamp) {\n        return new Date(timestamp).toLocaleString();\n    }\n\n    isProcessableDocument(file) {\n        const processableTypes = ['application/pdf', 'application/msword', 'text/plain'];\n        return processableTypes.includes(file.type);\n    }\n\n    // Notification methods\n    showNotification(message, type = 'info') {\n        // Create and show notification toast\n        const notification = document.createElement('div');\n        notification.className = `notification notification-${type}`;\n        notification.textContent = message;\n        \n        document.body.appendChild(notification);\n        \n        setTimeout(() => {\n            notification.remove();\n        }, 5000);\n    }\n\n    showSuccess(message) {\n        this.showNotification(message, 'success');\n    }\n\n    showError(message) {\n        this.showNotification(message, 'error');\n    }\n\n    showUploadProgress(filename) {\n        this.showNotification(`Uploading ${filename}...`, 'info');\n    }\n\n    showUploadSuccess(filename, result) {\n        this.showNotification(`${filename} uploaded successfully`, 'success');\n    }\n\n    showUploadError(filename, error) {\n        this.showNotification(`Failed to upload ${filename}: ${error}`, 'error');\n    }\n\n    updateNotificationBadge(count) {\n        const badge = document.querySelector('.notification-badge');\n        if (badge) {\n            badge.textContent = count;\n            badge.style.display = count > 0 ? 'flex' : 'none';\n        }\n    }\n\n    // Cleanup\n    destroy() {\n        // Close WebSocket connections\n        this.websockets.forEach(ws => ws.close());\n        this.websockets.clear();\n        \n        // Clear charts\n        this.charts.clear();\n    }\n}\n\n// Initialize dashboard when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.dashboardController = new DashboardController();\n});\n\n// Cleanup on page unload\nwindow.addEventListener('beforeunload', () => {\n    if (window.dashboardController) {\n        window.dashboardController.destroy();\n    }\n});"