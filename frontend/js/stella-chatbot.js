/**\n * Stella AI Chatbot - Integrated with all backend services\n * Provides intelligent assistance for college applications\n */\n\nclass StellaChatbot {\n    constructor() {\n        this.api = window.stellarAPI;\n        this.isOpen = false;\n        this.messages = [];\n        this.websocket = null;\n        \n        this.init();\n    }\n\n    init() {\n        this.createChatWidget();\n        this.setupEventListeners();\n        this.loadChatHistory();\n        this.connectWebSocket();\n    }\n\n    createChatWidget() {\n        const chatHTML = `\n            <div class=\"stella-chatbot\">\n                <div class=\"stella-widget\" id=\"stella-widget\">\n                    <div class=\"stella-pulse\"></div>\n                    <i class=\"material-icons\">psychology</i>\n                </div>\n                \n                <div class=\"stella-chat-window\" id=\"stella-chat-window\">\n                    <div class=\"stella-header\">\n                        <div class=\"stella-header-info\">\n                            <div class=\"stella-avatar\">\n                                <i class=\"material-icons\">star</i>\n                            </div>\n                            <div class=\"stella-info\">\n                                <h3>Stella AI</h3>\n                                <p>Your college application assistant</p>\n                            </div>\n                        </div>\n                        <button class=\"stella-close\" id=\"stella-close\">\n                            <i class=\"material-icons\">close</i>\n                        </button>\n                    </div>\n                    \n                    <div class=\"stella-messages\" id=\"stella-messages\">\n                        <div class=\"stella-message stella\">\n                            <div class=\"stella-message-avatar\">\n                                <i class=\"material-icons\">psychology</i>\n                            </div>\n                            <div class=\"stella-message-content\">\n                                Hi! I'm Stella, your AI college application assistant. I can help you with:\n                                <br>• University matching and recommendations\n                                <br>• Essay writing and analysis\n                                <br>• Application deadlines and planning\n                                <br>• Letter of recommendation guidance\n                                <br>• And much more!\n                                <br><br>How can I help you today?\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class=\"stella-quick-actions\" id=\"stella-quick-actions\">\n                        <button class=\"stella-quick-btn\" data-action=\"find-universities\">Find Universities</button>\n                        <button class=\"stella-quick-btn\" data-action=\"analyze-essay\">Analyze Essay</button>\n                        <button class=\"stella-quick-btn\" data-action=\"check-deadlines\">Check Deadlines</button>\n                        <button class=\"stella-quick-btn\" data-action=\"get-tips\">Application Tips</button>\n                    </div>\n                    \n                    <div class=\"stella-input-area\">\n                        <input type=\"text\" class=\"stella-input\" id=\"stella-input\" placeholder=\"Ask me anything about college applications...\">\n                        <button class=\"stella-send-btn\" id=\"stella-send-btn\">\n                            <i class=\"material-icons\">send</i>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.insertAdjacentHTML('beforeend', chatHTML);\n    }\n\n    setupEventListeners() {\n        const widget = document.getElementById('stella-widget');\n        const closeBtn = document.getElementById('stella-close');\n        const sendBtn = document.getElementById('stella-send-btn');\n        const input = document.getElementById('stella-input');\n        const quickActions = document.getElementById('stella-quick-actions');\n        \n        widget.addEventListener('click', () => this.toggleChat());\n        closeBtn.addEventListener('click', () => this.closeChat());\n        sendBtn.addEventListener('click', () => this.sendMessage());\n        \n        input.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                this.sendMessage();\n            }\n        });\n        \n        quickActions.addEventListener('click', (e) => {\n            if (e.target.classList.contains('stella-quick-btn')) {\n                this.handleQuickAction(e.target.dataset.action);\n            }\n        });\n    }\n\n    toggleChat() {\n        const chatWindow = document.getElementById('stella-chat-window');\n        this.isOpen = !this.isOpen;\n        \n        if (this.isOpen) {\n            chatWindow.classList.add('open');\n            document.getElementById('stella-input').focus();\n        } else {\n            chatWindow.classList.remove('open');\n        }\n    }\n\n    closeChat() {\n        const chatWindow = document.getElementById('stella-chat-window');\n        chatWindow.classList.remove('open');\n        this.isOpen = false;\n    }\n\n    async sendMessage() {\n        const input = document.getElementById('stella-input');\n        const message = input.value.trim();\n        \n        if (!message) return;\n        \n        // Add user message to chat\n        this.addMessage(message, 'user');\n        input.value = '';\n        \n        // Show typing indicator\n        this.showTyping();\n        \n        try {\n            // Send message to AI service\n            const response = await this.api.request('POST', '/ai/chat', {\n                message: message,\n                context: this.getConversationContext()\n            });\n            \n            // Remove typing indicator\n            this.hideTyping();\n            \n            // Add AI response\n            this.addMessage(response.message, 'stella');\n            \n            // Handle any actions suggested by AI\n            if (response.suggestedActions) {\n                this.showSuggestedActions(response.suggestedActions);\n            }\n            \n        } catch (error) {\n            this.hideTyping();\n            this.addMessage('Sorry, I encountered an error. Please try again.', 'stella');\n            console.error('Chat error:', error);\n        }\n    }\n\n    addMessage(content, sender) {\n        const messagesContainer = document.getElementById('stella-messages');\n        const messageHTML = `\n            <div class=\"stella-message ${sender}\">\n                <div class=\"stella-message-avatar\">\n                    <i class=\"material-icons\">${sender === 'stella' ? 'psychology' : 'person'}</i>\n                </div>\n                <div class=\"stella-message-content\">${content}</div>\n            </div>\n        `;\n        \n        messagesContainer.insertAdjacentHTML('beforeend', messageHTML);\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        \n        // Store message\n        this.messages.push({ content, sender, timestamp: Date.now() });\n    }\n\n    showTyping() {\n        const messagesContainer = document.getElementById('stella-messages');\n        const typingHTML = `\n            <div class=\"stella-message stella stella-typing-message\">\n                <div class=\"stella-message-avatar\">\n                    <i class=\"material-icons\">psychology</i>\n                </div>\n                <div class=\"stella-message-content\">\n                    <div class=\"stella-typing\">\n                        Stella is typing\n                        <div class=\"stella-typing-dots\">\n                            <div class=\"stella-typing-dot\"></div>\n                            <div class=\"stella-typing-dot\"></div>\n                            <div class=\"stella-typing-dot\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        messagesContainer.insertAdjacentHTML('beforeend', typingHTML);\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    hideTyping() {\n        const typingMessage = document.querySelector('.stella-typing-message');\n        if (typingMessage) {\n            typingMessage.remove();\n        }\n    }\n\n    async handleQuickAction(action) {\n        const quickMessages = {\n            'find-universities': 'Help me find universities that match my profile',\n            'analyze-essay': 'I need help analyzing my essay',\n            'check-deadlines': 'Show me my upcoming deadlines',\n            'get-tips': 'Give me some application tips'\n        };\n        \n        const message = quickMessages[action];\n        if (message) {\n            document.getElementById('stella-input').value = message;\n            await this.sendMessage();\n        }\n    }\n\n    getConversationContext() {\n        return {\n            userId: this.api.getUserId(),\n            userType: this.api.getUserType(),\n            recentMessages: this.messages.slice(-5), // Last 5 messages for context\n            currentSection: window.dashboardController?.currentSection || 'overview'\n        };\n    }\n\n    showSuggestedActions(actions) {\n        const quickActions = document.getElementById('stella-quick-actions');\n        quickActions.innerHTML = actions.map(action => \n            `<button class=\"stella-quick-btn\" data-action=\"${action.id}\">${action.label}</button>`\n        ).join('');\n    }\n\n    connectWebSocket() {\n        if (!this.api.isAuthenticated()) return;\n        \n        try {\n            this.websocket = this.api.connectWebSocket('/ai/chat/stream', (data) => {\n                if (data.type === 'message') {\n                    this.addMessage(data.content, 'stella');\n                } else if (data.type === 'typing') {\n                    if (data.isTyping) {\n                        this.showTyping();\n                    } else {\n                        this.hideTyping();\n                    }\n                }\n            });\n        } catch (error) {\n            console.error('Failed to connect chat WebSocket:', error);\n        }\n    }\n\n    async loadChatHistory() {\n        try {\n            const history = await this.api.request('GET', '/ai/chat/history?limit=10');\n            \n            history.messages.forEach(msg => {\n                this.addMessage(msg.content, msg.sender);\n            });\n            \n        } catch (error) {\n            console.error('Failed to load chat history:', error);\n        }\n    }\n\n    // Integration with dashboard features\n    async handleUniversitySearch(criteria) {\n        this.addMessage(`Searching for universities based on your criteria...`, 'stella');\n        \n        try {\n            const matches = await this.api.getUniversityMatches(criteria);\n            \n            let response = `I found ${matches.length} universities that match your criteria:\\n\\n`;\n            \n            matches.slice(0, 5).forEach((match, index) => {\n                response += `${index + 1}. **${match.university.name}** (${match.score}% match)\\n`;\n                response += `   Location: ${match.university.location}\\n`;\n                response += `   Match reasons: ${match.reasons.join(', ')}\\n\\n`;\n            });\n            \n            if (matches.length > 5) {\n                response += `And ${matches.length - 5} more matches. Would you like to see the full list?`;\n            }\n            \n            this.addMessage(response, 'stella');\n            \n        } catch (error) {\n            this.addMessage('Sorry, I had trouble finding university matches. Please try again.', 'stella');\n        }\n    }\n\n    async handleEssayAnalysis(essayText) {\n        this.addMessage('Analyzing your essay...', 'stella');\n        \n        try {\n            const analysis = await this.api.analyzeEssay(essayText);\n            \n            let response = `Here's my analysis of your essay:\\n\\n`;\n            response += `**Overall Score:** ${analysis.overallScore}/100\\n\\n`;\n            response += `**Strengths:**\\n${analysis.strengths.map(s => `• ${s}`).join('\\n')}\\n\\n`;\n            response += `**Areas for Improvement:**\\n${analysis.improvements.map(i => `• ${i}`).join('\\n')}\\n\\n`;\n            response += `**Suggestions:**\\n${analysis.suggestions.map(s => `• ${s}`).join('\\n')}`;\n            \n            this.addMessage(response, 'stella');\n            \n        } catch (error) {\n            this.addMessage('Sorry, I had trouble analyzing your essay. Please try again.', 'stella');\n        }\n    }\n\n    async handleDeadlineCheck() {\n        this.addMessage('Checking your upcoming deadlines...', 'stella');\n        \n        try {\n            const deadlines = await this.api.getDeadlines();\n            const upcoming = deadlines.filter(d => new Date(d.date) > new Date());\n            \n            if (upcoming.length === 0) {\n                this.addMessage('Great news! You don\\'t have any upcoming deadlines.', 'stella');\n                return;\n            }\n            \n            let response = `You have ${upcoming.length} upcoming deadlines:\\n\\n`;\n            \n            upcoming.slice(0, 5).forEach(deadline => {\n                const daysUntil = Math.ceil((new Date(deadline.date) - new Date()) / (1000 * 60 * 60 * 24));\n                response += `• **${deadline.title}** - ${deadline.university}\\n`;\n                response += `  Due: ${new Date(deadline.date).toLocaleDateString()} (${daysUntil} days)\\n\\n`;\n            });\n            \n            this.addMessage(response, 'stella');\n            \n        } catch (error) {\n            this.addMessage('Sorry, I had trouble checking your deadlines. Please try again.', 'stella');\n        }\n    }\n\n    destroy() {\n        if (this.websocket) {\n            this.websocket.close();\n        }\n        \n        const chatWidget = document.querySelector('.stella-chatbot');\n        if (chatWidget) {\n            chatWidget.remove();\n        }\n    }\n}\n\n// Initialize Stella chatbot when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Wait for API to be ready\n    setTimeout(() => {\n        if (window.stellarAPI && window.stellarAPI.isAuthenticated()) {\n            window.stellaChatbot = new StellaChatbot();\n        }\n    }, 1000);\n});\n\n// Cleanup on page unload\nwindow.addEventListener('beforeunload', () => {\n    if (window.stellaChatbot) {\n        window.stellaChatbot.destroy();\n    }\n});"