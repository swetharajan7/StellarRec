name: StellarRec Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Services
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: stellarrec_test
          POSTGRES_USER: stellarrec
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      elasticsearch:
        image: elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9200:9200

    strategy:
      matrix:
        service: [api-gateway, user-service, ai-service, application-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Setup Python (for AI service)
      if: matrix.service == 'ai-service'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      working-directory: backend
      run: |
        npm ci
        cd services/${{ matrix.service }}
        npm ci

    - name: Install Python dependencies (AI service)
      if: matrix.service == 'ai-service'
      working-directory: backend/services/ai-service
      run: |
        pip install -r requirements.txt

    - name: Build shared types
      working-directory: backend/shared/types
      run: npm run build

    - name: Run linting
      working-directory: backend/services/${{ matrix.service }}
      run: npm run lint

    - name: Run unit tests
      working-directory: backend/services/${{ matrix.service }}
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://stellarrec:test_password@localhost:5432/stellarrec_test
        REDIS_URL: redis://localhost:6379
        ELASTICSEARCH_URL: http://localhost:9200
        JWT_SECRET: test_jwt_secret
      run: npm run test:unit

    - name: Run integration tests
      working-directory: backend/services/${{ matrix.service }}
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://stellarrec:test_password@localhost:5432/stellarrec_test
        REDIS_URL: redis://localhost:6379
        ELASTICSEARCH_URL: http://localhost:9200
        JWT_SECRET: test_jwt_secret
      run: npm run test:integration

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/services/${{ matrix.service }}/coverage/lcov.info
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: backend
      run: npm ci

    - name: Run security audit
      working-directory: backend
      run: npm audit --audit-level=high

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=backend/package.json

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [api-gateway, user-service, ai-service, application-service]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/stellarrec-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend/services/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name stellarrec-staging-cluster

    - name: Deploy to staging
      working-directory: backend/k8s/staging
      run: |
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml
        kubectl apply -f secrets.yaml
        kubectl apply -f deployments/
        kubectl apply -f services/
        kubectl apply -f ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/api-gateway -n stellarrec-staging
        kubectl rollout status deployment/user-service -n stellarrec-staging
        kubectl rollout status deployment/ai-service -n stellarrec-staging
        kubectl rollout status deployment/application-service -n stellarrec-staging

    - name: Run smoke tests
      run: |
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://api-gateway.stellarrec-staging.svc.cluster.local:3000/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name stellarrec-production-cluster

    - name: Deploy to production
      working-directory: backend/k8s/production
      run: |
        kubectl apply -f namespace.yaml
        kubectl apply -f configmap.yaml
        kubectl apply -f secrets.yaml
        kubectl apply -f deployments/
        kubectl apply -f services/
        kubectl apply -f ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/api-gateway -n stellarrec-production
        kubectl rollout status deployment/user-service -n stellarrec-production
        kubectl rollout status deployment/ai-service -n stellarrec-production
        kubectl rollout status deployment/application-service -n stellarrec-production

    - name: Run health checks
      run: |
        kubectl run health-check --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f https://api.stellarrec.com/health

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'StellarRec Backend deployed successfully to production! ðŸš€'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      working-directory: backend/tests/performance
      run: |
        k6 run --out json=results.json load-test.js
        k6 run --out json=stress-results.json stress-test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: backend/tests/performance/*.json